// Remove comments from this prior to importing. CF can have issues with comments.
// The purpose of this CF stack is to backup R53 records from multiple accounts to an S3 bucket in another account
// This is useful for a data Bunker configuration



{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "route53_backup.template - Create Route53 Zone Record Backups using Lambda and an S3 Bucket",
    "Resources": { 
        "Route53BackupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "cross-account-disasterrecovery",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              }
            }
          },
              "Route53BackupRolePolicyAssume": {
                "Type" : "AWS::IAM::ManagedPolicy",
                "Properties" : {
                "ManagedPolicyName" : "cross-account-disasterrecovery-assume",
                "PolicyDocument" : {
                   "Version" : "2012-10-17",
                   "Statement": [ {
                   "Effect"   : "Allow",
                   "Action"   : "sts:AssumeRole",
                   "Resource" : [
                    "arn:aws:iam::111111111111:role/cross-account-disasterrecovery",
                    "arn:aws:iam::222222222222:role/cross-account-disasterrecovery",
                    "arn:aws:iam::333333333333:role/cross-account-disasterrecovery",
                    "arn:aws:iam::444444444444:role/cross-account-disasterrecovery",
                    "arn:aws:iam::555555555555:role/cross-account-disasterrecovery",
                    "arn:aws:iam::666666666666:role/cross-account-disasterrecovery",
                    "arn:aws:iam::777777777777:role/cross-account-disasterrecovery",
                     ]
                   } ]
                },
                "Roles": [ { "Ref": "Route53BackupRole" } ]
                }
              },
              "Route53BackupRolePolicy": {
                "Type" : "AWS::IAM::ManagedPolicy",
                "Properties" : {
                "ManagedPolicyName" : "cross-account-disasterrecovery-policy",
                "PolicyDocument" : {
                   "Version" : "2012-10-17",
                   "Statement": [ {
                   "Effect"   : "Allow",
                   "Action"   : [
                    "sts:AssumeRole",
                    "logs:*",
                    "route53:Get*",
                    "route53:List*",
                    "route53:TestDNSAnswer",
                    "s3:*"
                    ],
                   "Resource" : "*"
                   } ]
                },
                "Roles": [ { "Ref": "Route53BackupRole" } ]
                }
            },  
      "S3Bucket": {
         "Type" : "AWS::S3::Bucket",
         "Properties" : {
           "BucketName": "dr-route53",
           "VersioningConfiguration": {"Status" : "Enabled" },
           "PublicAccessBlockConfiguration":{
                "BlockPublicAcls" : "true",
                "BlockPublicPolicy" : "true",
                "IgnorePublicAcls" : "true",
                "RestrictPublicBuckets" : "true"
           },
           "LifecycleConfiguration": {
            "Rules": [
                {
                    "Id": "GlacierRule",
                    "Prefix": "glacier",
                    "Status": "Enabled",
                    "ExpirationInDays": "365",
                    "Transitions": [
                        {
                          "TransitionInDays": "32",
                          "StorageClass": "Glacier"
                        }
                    ]
                }
            ]   
          }
        }
       },
    // Make sure the lambda creates with the correct quotations. eg " instead of '
       "53BackupLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Handler": "index.lambda_handler",
          "Role": "arn:aws:iam::000000000000:role/cross-account-disasterrecovery",
          // Role in the account that the lambda and S3 Bucket Resides. 
          "Code": {
            "ZipFile":  { "Fn::Join": ["\n", [
                "import boto3",
                "from datetime import date",
            // account number and account friendly name of your other AWS account. Friendly name is used only for Cloudwatch logging purposes. These accounts will need ReadOnly access to R53
                "awsaccountlist = [",
                "['111111111111','awsaccount1'],",
                "['222222222222','awsaccount2'],",
                "['333333333333', 'awsaccount3'],",
                "['444444444444', 'awsaccount4'],",
                "['555555555555', 'awsaccount5'],",
                "['666666666666', 'awsaccount6'],",
                "['777777777777', 'awsaccount7']",
                "]",
                
                
                
                "backup_bucket = 'dr-route53'",
                "region = 'us-west-2'",
                
                
                
                "today = str(date.today().strftime('%Y%m%d'))",
                
                "def lambda_handler(event, context):",
                "    for awsaccount in awsaccountlist:",
            // [0] pulls the account number, [1] pulls the friendly name    
                "        source_account = awsaccount[0]",
                "        source_account_name = awsaccount[1]",
                "        sts_client = boto3.client('sts')",
                    
                "        assumedRoleObject = sts_client.assume_role(",
                "            RoleArn='arn:aws:iam::' + source_account + ':role/cross-account-disasterrecovery',",
                "            RoleSessionName='Route53Backup-cross-account-disasterrecovery'",
                "        )",
                    
                "        credentials = assumedRoleObject['Credentials']",
                        
                "        route53 = boto3.client(",
                "                'route53',",
                "                region_name=region,",
                "                aws_access_key_id = credentials['AccessKeyId'],",
                "                aws_secret_access_key = credentials['SecretAccessKey'],",
                "                aws_session_token = credentials['SessionToken']",
                "        )",
                "        print ('Assumed Role -' + source_account_name + 'arn:aws:iam::' + source_account + ':role/cross-account-disasterrecovery')",
                        
                "        s3 = boto3.resource('s3')",
                        
                "        try:",
                            
                "            paginate_hosted_zones = route53.get_paginator('list_hosted_zones')",
                        
                "            for zone_page in paginate_hosted_zones.paginate():",
                "                for zone in zone_page['HostedZones']:",     
                                
                "                    zone_name = zone['Name']",
                "                   print ('Exporting -' + zone_name)",
                                
                "                    zone_id = route53.get_hosted_zone(Id=zone['Id'])",
                "                    newzone = zone_id['HostedZone']['Id']",
                                
                "                   all_rrs = [];",
                                
                "                   zone_rr = route53.list_resource_record_sets(HostedZoneId=newzone)",
                "                   next_record = None",
                    
                "                   for rr in zone_rr['ResourceRecordSets']:",
                "                       all_rrs.append(rr)",
                                
                "                   while zone_rr['IsTruncated'] == True:",
                "                       next_record = zone_rr['NextRecordName']",
                "                       zone_rr = route53.list_resource_record_sets(HostedZoneId=newzone,StartRecordName=next_record)",
                                        
                "                       for rr in zone_rr['ResourceRecordSets']:",
                "                           all_rrs.append(rr)",
                    
                "                   s3.Bucket(backup_bucket).put_object(Key=today + '/' + source_account_name + '/' + zone_name, Body=str(all_rrs))",
                               
                                
                "        except Exception as e:",
                "            print(e)"
                            
          ]]}},
  
          "Runtime": "python2.7",
          "Timeout":"300"
        }
      },
     "Route53BackupRule": {
       "Type" : "AWS::Events::Rule",
       "Properties" : {
         "Name" : "R53-DR-Backup",
         "Description": "TriggerBackup",
         "EventPattern": {
           "source": [ "aws.route53" ]
         },
         "ScheduleExpression" : "rate(2 days)",
         "State": "ENABLED",
         "Targets": [{
           "Arn": { "Fn::GetAtt": ["53BackupLambdaFunction", "Arn"] },
           "Id": "index"
         }]
       }
     },
     "LambdaInvokePermission": {
       "Type": "AWS::Lambda::Permission",
       "Properties": {
         "FunctionName" : { "Ref" : "53BackupLambdaFunction" },
         "Action": "lambda:InvokeFunction",
         "Principal": "events.amazonaws.com",
         "SourceArn": { "Fn::GetAtt": ["Route53BackupRule","Arn"] }
       }
     }
    }
}
